{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","billAmount","setBillAmount","cashGiven","setCashGiven","isNextClicked","setNextClicked","isSubmitClicked","setSubmitClicked","requiredNumberOf2000Notes","setRequiredNumberOf2000Notes","requiredNumberOf500Notes","setRequiredNumberOf500Notes","requiredNumberOf200Notes","setRequiredNumberOf200Notes","requiredNumberOf100Notes","setRequiredNumberOf100Notes","requiredNumberOf50Notes","setRequiredNumberOf50Notes","requiredNumberOf20Notes","setRequiredNumberOf20Notes","requiredNumberOf10Notes","setRequiredNumberOf10Notes","requiredNumberOf5Notes","setRequiredNumberOf5Notes","requiredNumberOf2Notes","setRequiredNumberOf2Notes","requiredNumberOf1Notes","setRequiredNumberOf1Notes","totalRequiredNotes","setTotalRequiredNotes","className","for","type","id","onChange","e","target","value","onClick","alert","temp","parseInt","index","notesArray","numberOfNotesArray","onSubmitClicked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56108d03.chunk.js","sourcesContent":["import './App.css';\nimport {useState} from \"react\";\nfunction App() \n{\n  const[billAmount, setBillAmount] = useState(0);\n  const[cashGiven, setCashGiven] = useState(0);\n  const [isNextClicked, setNextClicked] = useState(false);\n  const [isSubmitClicked, setSubmitClicked] = useState(false);\n  const [requiredNumberOf2000Notes, setRequiredNumberOf2000Notes] = useState(0);\n  const [requiredNumberOf500Notes, setRequiredNumberOf500Notes] = useState(0);\n  const [requiredNumberOf200Notes, setRequiredNumberOf200Notes] = useState(0);\n  const [requiredNumberOf100Notes, setRequiredNumberOf100Notes] = useState(0);\n  const [requiredNumberOf50Notes, setRequiredNumberOf50Notes] = useState(0);\n  const [requiredNumberOf20Notes, setRequiredNumberOf20Notes] = useState(0);\n  const [requiredNumberOf10Notes, setRequiredNumberOf10Notes] = useState(0);\n  const [requiredNumberOf5Notes, setRequiredNumberOf5Notes] = useState(0);\n  const [requiredNumberOf2Notes, setRequiredNumberOf2Notes] = useState(0);\n  const [requiredNumberOf1Notes, setRequiredNumberOf1Notes] = useState(0);\n  const[totalRequiredNotes, setTotalRequiredNotes] = useState(0);\n  function onNextClicked()\n  {\n    if(billAmount > 0)\n    {\n      setNextClicked(true);\n    }\n    else{\n      alert(\"Please Enter a valid amount\");\n    }  \n  }\n\n  function onSubmitClicked()\n  {\n    let temp = cashGiven;   \n    let totalRequiredNotes = 0; \n    if(parseInt(temp, 10) > parseInt(billAmount, 10))\n    {\n      let index = 0;\n      let notesArray = [2000, 500, 200, 100, 50, 20, 10, 5, 2, 1];\n      let numberOfNotesArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      temp = temp - billAmount;\n      \n      //This is the logic for calculating the minimum number of notes required\n      while(temp > 0 && index < 10)\n      {\n        while(temp >= notesArray[index])\n        {\n          temp = temp - notesArray[index];\n          numberOfNotesArray[index]++;\n          totalRequiredNotes++;\n        }\n        index++;\n      }\n      setRequiredNumberOf2000Notes(numberOfNotesArray[0]);\n      setRequiredNumberOf500Notes(numberOfNotesArray[1]);\n      setRequiredNumberOf200Notes(numberOfNotesArray[2]);\n      setRequiredNumberOf100Notes(numberOfNotesArray[3]);\n      setRequiredNumberOf50Notes(numberOfNotesArray[4]);\n      setRequiredNumberOf20Notes(numberOfNotesArray[5]);\n      setRequiredNumberOf10Notes(numberOfNotesArray[6]);\n      setRequiredNumberOf5Notes(numberOfNotesArray[7]);\n      setRequiredNumberOf2Notes(numberOfNotesArray[8]);\n      setRequiredNumberOf1Notes(numberOfNotesArray[9]);\n      setTotalRequiredNotes(totalRequiredNotes);\n      setSubmitClicked(true);\n    }\n    else{\n      alert(\"Please Enter a valid amount\");\n    }\n  }\n\n  \n  \n  return (\n    <div className=\"App\">\n      <div className = \"container\">\n        <h1 className = \"app-heading\">Cash Register Manager(Mark 10)</h1>\n        <p className = \"app-description\">Enter the bill amount and cash given by the customer \n          and know minimum number of notes to return.\n        </p>\n\n        \n        <div className = \"bill-amount-container\">\n          <label for = \"bill-amount\" className = \"label\">Bill Amount:</label>\n          <input type = \"number\" id = \"bill-amount\" className = \"input\" onChange = {(e) => setBillAmount(e.target.value)}></input>\n          <button onClick = {() => onNextClicked()} className = \"button\">Next</button>\n        </div>\n\n        {isNextClicked == true && \n        <div className = \"amount-received-container\">\n          <label for = \"amount-received\" className = \"label\">Cash Given:</label>\n          <input type = \"number\" id = \"amount-received\" className = \"input\" onChange = {(e) => setCashGiven(e.target.value)}></input>\n          <button onClick = {() => onSubmitClicked()} className = \"button\">Submit</button>\n        </div>\n        }\n        \n        {isSubmitClicked == true && \n        <div className = \"notes-to-be-returned-container\">\n           <label for = \"notes-table\" className = \"label\">Return Change</label>\n          <table className = \"notes-table\">\n            <tbody>\n            <tr>\n              <th>No of notes</th>\n              <td>Notes</td>\n            </tr>\n            <tr>\n               <th>2000</th>\n               <td>{requiredNumberOf2000Notes}</td>\n            </tr>\n            <tr>\n               <th>500</th>\n               <td>{requiredNumberOf500Notes}</td>\n            </tr>\n            <tr>\n               <th>200</th>\n               <td>{requiredNumberOf200Notes}</td>\n            </tr>\n            <tr>\n               <th>100</th>\n               <td>{requiredNumberOf100Notes}</td>\n            </tr>\n            <tr>\n               <th>50</th>\n               <td>{requiredNumberOf50Notes}</td>\n            </tr>\n            <tr>\n               <th>20</th>\n               <td>{requiredNumberOf20Notes}</td>\n            </tr>\n            <tr>\n               <th>10</th>\n               <td>{requiredNumberOf10Notes}</td>\n            </tr>\n            <tr>\n               <th>5</th>\n               <td>{requiredNumberOf5Notes}</td>\n            </tr>\n            <tr>\n               <th>2</th>\n               <td>{requiredNumberOf2Notes}</td>\n            </tr>\n            <tr>\n               <th>1</th>\n               <td>{requiredNumberOf1Notes}</td>\n            </tr>\n            </tbody> \n          </table>\n          <h1>Total Required Notes Are: {totalRequiredNotes}</h1>\n        </div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}