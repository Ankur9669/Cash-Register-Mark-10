{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","isNextClicked","setNextClicked","isSubmitClicked","setSubmitClicked","className","for","type","id","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNA6FeA,MA3Ff,WAEE,MAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAwBC,EAAxB,KAEA,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAY,YAAjB,UACE,oBAAIA,UAAY,cAAhB,mCACA,mBAAGA,UAAY,kBAAf,8GAKA,sBAAKA,UAAY,wBAAjB,UACE,uBAAOC,IAAM,cAAcD,UAAY,QAAvC,yBACA,uBAAOE,KAAO,SAASC,GAAK,cAAcH,UAAY,sBACtD,wBAAQI,QAAW,kBAAMP,GAAe,IAAOG,UAAY,SAA3D,qBAGgB,GAAjBJ,GACD,sBAAKI,UAAY,4BAAjB,UACE,uBAAOC,IAAM,kBAAkBD,UAAY,QAA3C,wBACA,uBAAOE,KAAO,SAASC,GAAK,kBAAkBH,UAAY,0BAC1D,wBAAQI,QAAW,kBAAML,GAAiB,IAAOC,UAAY,SAA7D,uBAIkB,GAAnBF,GACD,sBAAKE,UAAY,iCAAjB,UACG,uBAAOC,IAAM,cAAcD,UAAY,QAAvC,2BACD,uBAAOA,UAAY,cAAnB,SACE,kCACA,+BACE,6CACA,0CAEF,+BACG,sCACA,sCAEH,+BACG,sCACA,sCAEH,+BACG,qCACA,sCAEH,+BACG,qCACA,sCAEH,+BACG,qCACA,sCAEH,+BACG,oCACA,sCAEH,+BACG,oCACA,sCAEH,+BACG,oCACA,sCAEH,+BACG,mCACA,sCAEH,+BACG,mCACA,sCAEH,+BACG,mCACA,2CAIL,oECzEKK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9f0d0f50.chunk.js","sourcesContent":["import './App.css';\nimport {useState} from \"react\";\nfunction App() \n{\n  const [isNextClicked, setNextClicked] = useState(false);\n  const [isSubmitClicked, setSubmitClicked] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <div className = \"container\">\n        <h1 className = \"app-heading\">Cash Register Manager</h1>\n        <p className = \"app-description\">Enter the bill amount and cash given by the customer \n          and know minimum number of notes to return.\n        </p>\n\n        \n        <div className = \"bill-amount-container\">\n          <label for = \"bill-amount\" className = \"label\">Bill Amount</label>\n          <input type = \"number\" id = \"bill-amount\" className = \"input-bill-amount\"></input>\n          <button onClick = {() => setNextClicked(true)} className = \"button\">Next</button>\n        </div>\n\n        {isNextClicked == true && \n        <div className = \"amount-received-container\">\n          <label for = \"amount-received\" className = \"label\">Cash Given</label>\n          <input type = \"number\" id = \"amount-received\" className = \"input-amount-received\"></input>\n          <button onClick = {() => setSubmitClicked(true)} className = \"button\">Submit</button>\n        </div>\n        }\n        \n        {isSubmitClicked == true && \n        <div className = \"notes-to-be-returned-container\">\n           <label for = \"notes-table\" className = \"label\">Return Change</label>\n          <table className = \"notes-table\">\n            <tbody>\n            <tr>\n              <th>No of notes</th>\n              <td>Notes</td>\n            </tr>\n            <tr>\n               <th>2000</th>\n               <td>0</td>\n            </tr>\n            <tr>\n               <th>1000</th>\n               <td>0</td>\n            </tr>\n            <tr>\n               <th>500</th>\n               <td>0</td>\n            </tr>\n            <tr>\n               <th>200</th>\n               <td>0</td>\n            </tr>\n            <tr>\n               <th>100</th>\n               <td>0</td>\n            </tr>\n            <tr>\n               <th>50</th>\n               <td>0</td>\n            </tr>\n            <tr>\n               <th>20</th>\n               <td>0</td>\n            </tr>\n            <tr>\n               <th>10</th>\n               <td>0</td>\n            </tr>\n            <tr>\n               <th>5</th>\n               <td>0</td>\n            </tr>\n            <tr>\n               <th>2</th>\n               <td>0</td>\n            </tr>\n            <tr>\n               <th>1</th>\n               <td>0</td>\n            </tr>\n            </tbody> \n          </table>\n          <h1>Total Required Notes Are:</h1>\n        </div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}